""" Pentagon numbers
Pentagonal numbers are generated by the formula, 
Pn=n(3n-1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. 
However, their difference, 70 - 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which 
their sum and difference are pentagonal and D = |Pk - Pj|
is minimised; what is the value of D?
"""

from math import sqrt
from function_collection.main import timer_wrapper

limit = 10000


def penta() -> list[int]:
    return [int(i * (3 * i - 1) / 2) for i in range(1, limit + 1)]


def check_penta(x: int) -> bool:
    n = (1 + sqrt(1 + 24 * x)) / 6
    return n.is_integer()


def calc44() -> int:
    n = penta()
    min_ = 1000000000
    D = 0

    for i in range(1, limit):
        for j in range(1, limit):
            if check_penta(n[i] + n[j]) and check_penta(abs(n[j] - n[i])):
                print("found one! ", n[i], n[j])
                d = abs(n[i] - n[j])
                if d < min_:
                    min_ = d
                    D = d
    print("FOUND: ", D, ' with ', min_)
    return D


def calc44_2() -> int:
    n = penta()
    return min([abs(n[i] - n[j]) for i in range(1, limit) for j in range(1, limit)
                if check_penta(n[i] + n[j]) and check_penta(abs(n[j] - n[i]))])


if __name__ == '__main__':
    testing = False

    if testing:
        print(check_penta(92))
        print(check_penta(145))
        print(check_penta(4))
    else:
        print(timer_wrapper(calc44_2))
